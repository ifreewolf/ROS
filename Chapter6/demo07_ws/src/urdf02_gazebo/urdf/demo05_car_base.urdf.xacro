<robot name="mycar" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="footprint_radius" value="0.001" />
    <!-- 1.添加base_footprint -->
    <link name="base_footprint">
        <visual>
            <geometry>
                <sphere radius="${footprint_radius}" />
            </geometry>
        </visual>
    </link>

    <!-- 2.添加底盘 -->
    <!-- 
        形状：圆柱
        半径：0.1m
        高度：0.08m
        离地间距：0.015m
     -->
    <xacro:property name="base_radius" value="0.1" />
    <xacro:property name="base_length" value="0.08" />
    <xacro:property name="base_mass" value="2" />
    <xacro:property name="lidi" value="0.015" />
    <xacro:property name="base_joint_z" value="${base_length / 2 + lidi}" />
    <!-- 2-1.link -->
    <link name="base_link">
        <visual>
            <geometry>
                <cylinder length="${base_length}" radius="${base_radius}" />
            </geometry>

            <origin xyz="0.0 0.0 0" rpy="0.0 0.0 0.0" />

            <material name="baselink_color">
                <color rgba="1.0 0.5 0.2 0.5" />
            </material>
        </visual>
        <!-- 碰撞属性 -->
        <collision>
            <geometry>
                <cylinder length="${base_length}" radius="${base_radius}" />
            </geometry>
            <origin xyz="0.0 0.0 0" rpy="0.0 0.0 0.0" />
        </collision>
        <!-- 调用惯性矩阵函数 -->
        <xacro:cylinder_inertial_matrix m="${base_mass}" r="${base_radius}" h="${base_length}" />
    </link>
    <!-- 颜色 -->
    <gazebo reference="base_link">
        <material>Gazebo/Yellow</material>
    </gazebo>

    <!-- 2-2.joint -->
    <joint name="link2footprint" type="fixed">
        <parent link="base_footprint" />
        <child link="base_link" />
        <!-- z的偏移量=离地间距+base_link高度的一半=0.04+0.015=0.055 -->
        <!-- 如果这个偏移量设置为0，然后在base_link中设置z的偏移量为0.055，也可以得到一样的效果；但不建议这么做，因为相对坐标会重合。 -->
        <!-- 要求，在正常情况下，每个link的偏移都设置为0； -->
        <origin xyz="0.0 0.0 0.055" rpy="0.0 0.0 0.0" />
    </joint>

    <!-- 3.添加驱动轮 -->
    <!-- 驱动轮属性 -->
    <!-- 
        形状:圆柱
        半径:0.0325m
        长度:0.015m
     -->
    <xacro:property name="wheel_radius" value="0.0325" />
    <xacro:property name="wheel_length" value="0.015" />
    <xacro:property name="wheel_mass" value="0.05" />
    <xacro:property name="PI" value="3.1415927" />
    <xacro:property name="wheel_joint_z" value="${(base_length / 2 + lidi - wheel_radius)*-1}" />

    <material name="black">
        <color rgba="0.0 0.0 0.0 1.0" />
    </material>
    <!-- 驱动轮宏实现 -->
    <xacro:macro name="wheel_func" params="wheel_name flag">
        <link name="${wheel_name}_wheel">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
                <material name="black" />
            </visual>
            <!-- 碰撞属性 -->
            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="${PI / 2} 0.0 0.0" />
            </collision>
            <!-- 调用惯性矩阵 -->
            <xacro:cylinder_inertial_matrix m="${wheel_mass}" r="${wheel_radius}" h="${wheel_length}" />
        </link>
        <!-- 颜色 -->
        <gazebo reference="${wheel_name}_wheel">
            <material>Gazebo/Red</material>
        </gazebo>
        <joint name="${wheel_name}2link" type="continuous">
            <parent link="base_link" />
            <child link="${wheel_name}_wheel" />
            <!-- 
                x 无偏移
                y 车体的半径
                z =车体高度 / 2 + 离地间距 - 车轮半径=0.055-0.0325=0.0255m
            -->
            <origin xyz="0.0 ${flag * 0.1} ${wheel_joint_z}" rpy="0.0 0.0 0.0" />
            <axis xyz="0 1 0" />
        </joint>
    </xacro:macro>

    <xacro:wheel_func wheel_name="left" flag="1" />
    <xacro:wheel_func wheel_name="right" flag="-1" />


    <!-- 4.添加万向轮 -->
    <!-- 
        形状：球
        半径： 0.0075m
     -->
    <xacro:property name="small_wheel_radius" value="0.0075" />
    <xacro:property name="small_wheel_mass" value="0.01" />
    <!-- Z的偏移量 = 车体高度 / 2 + 离地间距 - 万向轮半径 -->
    <xacro:property name="small_joint_z" value="${(base_length / 2 + lidi - small_wheel_radius) * -1}" />
    <xacro:macro name="small_wheel_func" params="small_wheel_name flag">
        <link name="${small_wheel_name}_wheel">
            <visual>
                <geometry>
                    <sphere radius="${small_wheel_radius}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="0 0.0 0.0" />
                <material name="small_wheel_color">
                    <color rgba="0.0 0.0 0.0 0.3" />
                </material>
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${small_wheel_radius}" />
                </geometry>
                <origin xyz="0.0 0.0 0.0" rpy="0 0.0 0.0" />
            </collision>
            <xacro:sphere_inertial_matrix m="${small_wheel_mass}" r="${small_wheel_radius}" />
        </link>
        <gazebo reference="${small_wheel_name}_wheel">
            <material>Gazebo/Red</material>
        </gazebo>
        <!-- 4-2.joint -->
        <joint name="${small_wheel_name}2link" type="continuous">
            <parent link="base_link" />
            <child link="${small_wheel_name}_wheel" />
            <!-- 
                x < 车体的半径
                y = 0
                z = 0.055 - 0.0075 = 0.0475
            -->
            <origin xyz="${flag * 0.08} 0 ${small_joint_z}" rpy="0.0 0.0 0.0" />
            <axis xyz="0 1 0" />
        </joint>
    </xacro:macro>

    <xacro:small_wheel_func small_wheel_name="front" flag="1" />
    <xacro:small_wheel_func small_wheel_name="back" flag="-1" />
    
</robot>